{"version":3,"sources":["webpack:////home/elliott/playground/test/theia/packages/filesystem/src/browser/file-tree/file-tree.ts","webpack:////home/elliott/playground/test/theia/packages/filesystem/src/browser/file-upload-service.ts","webpack:////home/elliott/playground/test/theia/packages/filesystem/src/browser/filesystem-browserfs.ts","webpack:////home/elliott/playground/test/theia/packages/filesystem/src/common/filesystem-utils.ts","webpack:////home/elliott/playground/test/theia/packages/filesystem/src/common/index.ts"],"names":[],"mappings":"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","file":"5.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { TreeNode, CompositeTreeNode, SelectableTreeNode, ExpandableTreeNode, TreeImpl } from '@theia/core/lib/browser';\nimport { FileSystem, FileStat } from '../../common';\nimport { UriSelection } from '@theia/core/lib/common/selection';\nimport { FileSelection } from '../file-selection';\n\n@injectable()\nexport class FileTree extends TreeImpl {\n\n    @inject(FileSystem) protected readonly fileSystem: FileSystem;\n\n    async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (FileStatNode.is(parent)) {\n            const fileStat = await this.resolveFileStat(parent);\n            if (fileStat) {\n                return this.toNodes(fileStat, parent);\n            }\n            return [];\n        }\n        return super.resolveChildren(parent);\n    }\n\n    protected resolveFileStat(node: FileStatNode): Promise<FileStat | undefined> {\n        return this.fileSystem.getFileStat(node.fileStat.uri).then(fileStat => {\n            if (fileStat) {\n                node.fileStat = fileStat;\n                return fileStat;\n            }\n            return undefined;\n        });\n    }\n\n    protected async toNodes(fileStat: FileStat, parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (!fileStat.children) {\n            return [];\n        }\n        const result = await Promise.all(fileStat.children.map(async child =>\n            this.toNode(child, parent)\n        ));\n        return result.sort(DirNode.compare);\n    }\n\n    protected toNode(fileStat: FileStat, parent: CompositeTreeNode): FileNode | DirNode {\n        const uri = new URI(fileStat.uri);\n        const id = this.toNodeId(uri, parent);\n        const node = this.getNode(id);\n        if (fileStat.isDirectory) {\n            if (DirNode.is(node)) {\n                node.fileStat = fileStat;\n                return node;\n            }\n            return <DirNode>{\n                id, uri, fileStat, parent,\n                expanded: false,\n                selected: false,\n                children: []\n            };\n        }\n        if (FileNode.is(node)) {\n            node.fileStat = fileStat;\n            return node;\n        }\n        return <FileNode>{\n            id, uri, fileStat, parent,\n            selected: false\n        };\n    }\n\n    protected toNodeId(uri: URI, parent: CompositeTreeNode): string {\n        return uri.path.toString();\n    }\n}\n\nexport interface FileStatNode extends SelectableTreeNode, UriSelection, FileSelection {\n}\nexport namespace FileStatNode {\n    export function is(node: object | undefined): node is FileStatNode {\n        return !!node && 'fileStat' in node;\n    }\n\n    export function getUri(node: TreeNode | undefined): string | undefined {\n        if (is(node)) {\n            return node.fileStat.uri;\n        }\n        return undefined;\n    }\n}\n\nexport type FileNode = FileStatNode;\nexport namespace FileNode {\n    export function is(node: Object | undefined): node is FileNode {\n        return FileStatNode.is(node) && !node.fileStat.isDirectory;\n    }\n}\n\nexport type DirNode = FileStatNode & ExpandableTreeNode;\nexport namespace DirNode {\n    export function is(node: Object | undefined): node is DirNode {\n        return FileStatNode.is(node) && node.fileStat.isDirectory;\n    }\n\n    export function compare(node: TreeNode, node2: TreeNode): number {\n        return DirNode.dirCompare(node, node2) || uriCompare(node, node2);\n    }\n\n    export function uriCompare(node: TreeNode, node2: TreeNode): number {\n        if (FileStatNode.is(node)) {\n            if (FileStatNode.is(node2)) {\n                return node.uri.displayName.localeCompare(node2.uri.displayName);\n            }\n            return 1;\n        }\n        if (FileStatNode.is(node2)) {\n            return -1;\n        }\n        return 0;\n    }\n\n    export function dirCompare(node: TreeNode, node2: TreeNode): number {\n        const a = DirNode.is(node) ? 1 : 0;\n        const b = DirNode.is(node2) ? 1 : 0;\n        return b - a;\n    }\n\n    export function createRoot(fileStat: FileStat): DirNode {\n        const uri = new URI(fileStat.uri);\n        const id = fileStat.uri;\n        return {\n            id, uri, fileStat,\n            visible: true,\n            parent: undefined,\n            children: [],\n            expanded: true,\n            selected: false\n        };\n    }\n\n    export function getContainingDir(node: TreeNode | undefined): DirNode | undefined {\n        let containing = node;\n        while (!!containing && !is(containing)) {\n            containing = containing.parent;\n        }\n        return containing;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { injectable, inject, postConstruct } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { CancellationTokenSource, CancellationToken, checkCancelled, cancelled } from '@theia/core/lib/common/cancellation';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { Progress } from '@theia/core/lib/common/message-service-protocol';\n// import { Endpoint } from '@theia/core/lib/browser/endpoint';\nimport { S3StorageSystem } from './s3storagesystem';\nimport { FileUriLite } from './filesystem-browserfs';\nimport throttle = require('lodash.throttle');\n\nconst MAXFILESIZE = 2048 * 1023;\nconst MAXFILENUMBER = 128;\n\nexport interface FileUploadParams {\n    source?: DataTransfer\n    progress?: FileUploadProgressParams\n    onDidUpload?: (uri: string) => void;\n}\nexport interface FileUploadProgressParams {\n    text: string\n}\n\nexport interface FileUploadResult {\n    uploaded: string[]\n}\n\n@injectable()\nexport class FileUploadService {\n\n    static TARGET = 'target';\n    static UPLOAD = 'upload';\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(S3StorageSystem)\n    protected readonly s3fs: S3StorageSystem;\n\n    protected uploadForm: FileUploadService.Form;\n\n    @postConstruct()\n    protected init(): void {\n        this.uploadForm = this.createUploadForm();\n    }\n\n    protected createUploadForm(): FileUploadService.Form {\n        const targetInput = document.createElement('input');\n        targetInput.type = 'text';\n        targetInput.name = FileUploadService.TARGET;\n        targetInput.classList.add('theia-input');\n\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.classList.add('theia-input');\n        fileInput.name = FileUploadService.UPLOAD;\n        fileInput.multiple = true;\n\n        const form = document.createElement('form');\n        form.style.display = 'none';\n        form.enctype = 'multipart/form-data';\n        form.append(targetInput);\n        form.append(fileInput);\n\n        document.body.appendChild(form);\n\n        fileInput.addEventListener('change', () => {\n            if (this.deferredUpload && fileInput.value) {\n                const source = new FormData(form);\n                // clean up to allow upload to the same folder twice\n                fileInput.value = '';\n                const targetUri = new URI(<string>source.get(FileUploadService.TARGET));\n                const { resolve, reject } = this.deferredUpload;\n                this.deferredUpload = undefined;\n                const { onDidUpload } = this.uploadForm;\n                this.withProgress(\n                    (progress, token) => this.doUpload(targetUri, { source, progress, token, onDidUpload }),\n                    this.uploadForm.progress).then(resolve, reject);\n            }\n        });\n        return { targetInput, fileInput };\n    }\n\n    protected deferredUpload: Deferred<FileUploadResult> | undefined;\n    async upload(targetUri: string | URI, params: FileUploadParams = {}): Promise<FileUploadResult> {\n        const { source, onDidUpload } = params;\n        if (source) {\n            return this.withProgress(\n                (progress, token) => this.doUpload(new URI(String(targetUri)), { source, progress, token, onDidUpload }),\n                params.progress);\n        }\n        this.deferredUpload = new Deferred<FileUploadResult>();\n        this.uploadForm.targetInput.value = String(targetUri);\n        this.uploadForm.fileInput.click();\n        this.uploadForm.progress = params.progress;\n        this.uploadForm.onDidUpload = params.onDidUpload;\n        return this.deferredUpload.promise;\n    }\n\n    protected async doUpload(targetUri: URI, { source, progress, token, onDidUpload }: FileUploadService.UploadParams): Promise<FileUploadResult> {\n        const result: FileUploadResult = { uploaded: [] };\n        let total = 0;\n        let done = 0;\n        let totalFiles = 0;\n        let doneFiles = 0;\n        const reportProgress = throttle(() => progress.report({\n            message: `${doneFiles} out of ${totalFiles}`,\n            work: { done, total }\n        }), 60);\n        const deferredUpload = new Deferred<FileUploadResult>();\n        // const endpoint = new Endpoint({ path: '/file-upload' });\n        // const socketOpen = new Deferred<void>();\n        // const socket = new WebSocket(endpoint.getWebSocketUrl().toString());\n        // socket.onerror = e => {\n        //     socketOpen.reject(e);\n        //     deferredUpload.reject(e);\n        // };\n        // socket.onclose = ({ code, reason }) => deferredUpload.reject(new Error(String(reason || code)));\n        // socket.onmessage = ({ data }) => {\n        //     const response = JSON.parse(data);\n        //     if (response.uri) {\n        //         doneFiles++;\n        //         result.uploaded.push(response.uri);\n        //         reportProgress();\n        //         if (onDidUpload) {\n        //             onDidUpload(response.uri);\n        //         }\n        //         return;\n        //     }\n        //     if (response.done) {\n        //         done = response.done;\n        //         reportProgress();\n        //         return;\n        //     }\n        //     if (response.ok) {\n        //         deferredUpload.resolve(result);\n        //     } else if (response.error) {\n        //         deferredUpload.reject(new Error(response.error));\n        //     } else {\n        //         console.error('unknown upload response: ' + response);\n        //     }\n        //     socket.close();\n        // };\n        // socket.onopen = () => socketOpen.resolve();\n        // const rejectAndClose = (e: Error) => {\n        //     deferredUpload.reject(e);\n        //     if (socket.readyState === 1) {\n        //         socket.close();\n        //     }\n        // };\n        token.onCancellationRequested(() => deferredUpload.reject(cancelled()));\n        try {\n            const urilist: URI[] = [];\n            const filelist: File[] = [];\n            await this.index(targetUri, source, {\n                token,\n                progress,\n                accept: async ({ uri, file }) => {\n                    if (totalFiles > MAXFILENUMBER) {\n                        return;\n                    }\n                    total += file.size;\n                    totalFiles++;\n                    urilist.push(uri);\n                    filelist.push(file);\n                }\n            });\n\n            reportProgress();\n            for (let i = 0; i < totalFiles; i ++) {\n                checkCancelled(token);\n                try {\n                    const uri = urilist[i];\n                    const file = filelist[i];\n                    if (file.size > 0 && file.size < MAXFILESIZE) {\n                        const dstPathWithScheme = uri.toString();\n                        const dstPath = uri.toString().substr(7);\n                        console.log('uploading ' + dstPath);\n                        const content = await new Promise((resolve, reject) => {\n                            const fr = new FileReader();\n                            fr.onload = () => {\n                                resolve(fr.result);\n                            };\n                            fr.readAsArrayBuffer(file);\n                        });\n                        // console.log('ensuring ' + polyDirname(dstPath));\n                        const _dstUri = new URI(dstPath);\n                        await this.s3fs.ensureDirExist(FileUriLite.fsPath(_dstUri.parent));\n                        // console.log('writing ' + content);\n                        await this.s3fs.writeFile(FileUriLite.fsPath(_dstUri), new Uint8Array(<ArrayBuffer>content));\n                        // await new Promise(resolve => setTimeout(resolve, 3000));\n                        done += file.size;\n                        doneFiles++;\n                        result.uploaded.push(dstPathWithScheme);\n                        reportProgress();\n                        if (onDidUpload) {\n                            onDidUpload(dstPathWithScheme);\n                        }\n                    }\n                } catch (e) {\n                    deferredUpload.reject(e);\n                }\n            }\n            deferredUpload.resolve(result);\n        } catch (e) {\n            deferredUpload.reject(e);\n        }\n        return deferredUpload.promise;\n    }\n\n    protected async withProgress<T>(\n        cb: (progress: Progress, token: CancellationToken) => Promise<T>,\n        { text }: FileUploadProgressParams = { text: 'Uploading Files...' }\n    ): Promise<T> {\n        const cancellationSource = new CancellationTokenSource();\n        const { token } = cancellationSource;\n        const progress = await this.messageService.showProgress({ text, options: { cancelable: true } }, () => cancellationSource.cancel());\n        try {\n            return await cb(progress, token);\n        } finally {\n            progress.cancel();\n        }\n    }\n\n    protected async index(targetUri: URI, source: FileUploadService.Source, context: FileUploadService.Context): Promise<void> {\n        if (source instanceof FormData) {\n            await this.indexFormData(targetUri, source, context);\n        } else {\n            await this.indexDataTransfer(targetUri, source, context);\n        }\n    }\n\n    protected async indexFormData(targetUri: URI, formData: FormData, context: FileUploadService.Context): Promise<void> {\n        for (const file of formData.getAll(FileUploadService.UPLOAD)) {\n            if (file instanceof File) {\n                await this.indexFile(targetUri, file, context);\n            }\n        }\n    }\n\n    protected async indexDataTransfer(targetUri: URI, dataTransfer: DataTransfer, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        if (dataTransfer.items) {\n            await this.indexDataTransferItemList(targetUri, dataTransfer.items, context);\n        } else {\n            await this.indexFileList(targetUri, dataTransfer.files, context);\n        }\n    }\n\n    protected async indexFileList(targetUri: URI, files: FileList, context: FileUploadService.Context): Promise<void> {\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            if (file) {\n                await this.indexFile(targetUri, file, context);\n            }\n        }\n    }\n\n    protected async indexFile(targetUri: URI, file: File, context: FileUploadService.Context): Promise<void> {\n        await context.accept({\n            uri: targetUri.resolve(file.name),\n            file\n        });\n    }\n\n    protected async indexDataTransferItemList(targetUri: URI, items: DataTransferItemList, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        const entries: WebKitEntry[] = [];\n        for (let i = 0; i < items.length; i++) {\n            const entry = items[i].webkitGetAsEntry() as WebKitEntry;\n            entries.push(entry);\n        }\n        await this.indexEntries(targetUri, entries, context);\n\n    }\n\n    protected async indexEntry(targetUri: URI, entry: WebKitEntry | null, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        if (!entry) {\n            return;\n        }\n        if (entry.isDirectory) {\n            await this.indexDirectoryEntry(targetUri, entry as WebKitDirectoryEntry, context);\n        } else {\n            await this.indexFileEntry(targetUri, entry as WebKitFileEntry, context);\n        }\n    }\n\n    /**\n     *  Read all entries within a folder by block of 100 files or folders until the\n     *  whole folder has been read.\n     */\n    protected async indexDirectoryEntry(targetUri: URI, entry: WebKitDirectoryEntry, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        const newTargetUri = targetUri.resolve(entry.name);\n        return new Promise<void>(async (resolve, reject) => {\n            const reader = entry.createReader();\n            const getEntries = () => reader.readEntries(async results => {\n                try {\n                    if (!context.token.isCancellationRequested && results && results.length) {\n                        await this.indexEntries(newTargetUri, results, context);\n                        getEntries(); // loop to read all getEntries\n                    } else {\n                        resolve();\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            }, reject);\n            getEntries();\n        });\n    }\n\n    protected async indexEntries(targetUri: URI, entries: WebKitEntry[], context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        for (let i = 0; i < entries.length; i++) {\n            await this.indexEntry(targetUri, entries[i], context);\n        }\n    }\n\n    protected async indexFileEntry(targetUri: URI, entry: WebKitFileEntry, context: FileUploadService.Context): Promise<void> {\n        checkCancelled(context.token);\n        await new Promise<void>((resolve, reject) => {\n            try {\n                entry.file(\n                    file => this.indexFile(targetUri, file, context).then(resolve, reject),\n                    reject,\n                );\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n}\n\nexport namespace FileUploadService {\n    export type Source = FormData | DataTransfer;\n    export interface UploadEntry {\n        file: File\n        uri: URI\n    }\n    export interface Context {\n        progress: Progress\n        token: CancellationToken\n        accept: (entry: UploadEntry) => Promise<void>\n    }\n    export interface Form {\n        targetInput: HTMLInputElement\n        fileInput: HTMLInputElement\n        progress?: FileUploadProgressParams\n        onDidUpload?: (uri: string) => void\n    }\n    export interface UploadParams {\n        source: FileUploadService.Source,\n        progress: Progress,\n        token: CancellationToken,\n        onDidUpload?: (uri: string) => void\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Elliott Wen and Gerald Weber.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { injectable, inject, optional } from 'inversify';\nimport { TextDocument } from 'vscode-languageserver-types';\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-protocol';\nimport URI from '@theia/core/lib/common/uri';\nimport Uri from 'vscode-uri';\nimport { TextDocumentContentChangeDelta } from '@theia/core/lib/common/lsp-types';\nimport { FileStat, FileSystem, FileSystemClient, FileSystemError, FileMoveOptions, FileDeleteOptions, FileAccess } from '../common/filesystem';\nimport { S3StorageSystem, S3Object } from './s3storagesystem';\n\n@injectable()\nexport class FileSystemBrowserOptions {\n\n    encoding: string;\n    recursive: boolean;\n    overwrite: boolean;\n    moveToTrash: boolean;\n\n    public static DEFAULT: FileSystemBrowserOptions = {\n        encoding: 'utf8',\n        overwrite: false,\n        recursive: true,\n        moveToTrash: false\n    };\n\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport namespace FileUriLite {\n    export function create(fsPath_: string): URI {\n        return new URI(Uri.file(fsPath_));\n    }\n\n    export function fsPath(uri: URI | string): string {\n        if (typeof uri === 'string') {\n            return fsPath(new URI(uri));\n        } else {\n            const fsPathFromVsCodeUri = (uri as any).codeUri.fsPath;\n            return fsPathFromVsCodeUri;\n        }\n    }\n}\n\n@injectable()\nexport class BrowserFileSystem implements FileSystem {\n    // private _s3fs_lock: boolean;\n    constructor(\n        @inject(FileSystemBrowserOptions) @optional() protected readonly options: FileSystemBrowserOptions = FileSystemBrowserOptions.DEFAULT,\n        @inject(S3StorageSystem) protected readonly _s3fs: S3StorageSystem\n    ) {\n    }\n\n    protected client: FileSystemClient | undefined;\n    setClient(client: FileSystemClient | undefined): void {\n        this.client = client;\n    }\n\n    async getFileStat(uri: string): Promise<FileStat | undefined> {\n        const uri_ = new URI(uri);\n        const stat = await this.doGetStat(uri_, 1);\n        return stat;\n    }\n\n    async exists(uri: string): Promise<boolean> {\n        const _uri = new URI(uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            return false;\n        }\n        return true;\n    }\n\n    async resolveContent(uri: string, options?: { encoding?: string }): Promise<{ stat: FileStat, content: string }> {\n        const _uri = new URI(uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            throw FileSystemError.FileNotFound(uri);\n        }\n        if (stat.isDirectory) {\n            throw FileSystemError.FileIsDirectory(uri, 'Cannot resolve the content.');\n        }\n        const encoding = this.doGetEncoding(options);\n        if (encoding !== 'utf8') {\n            throw FileSystemError.FileExists(_uri, 'Unsupported File Encoding. ' + encoding);\n        }\n        const contentBuffer = await this._s3fs.readFile(FileUriLite.fsPath(_uri));\n        const content = contentBuffer.toString();\n        return { stat, content };\n    }\n\n    async setContent(file: FileStat, content: string, options?: { encoding?: string }): Promise<FileStat> {\n        const _uri = new URI(file.uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            throw FileSystemError.FileNotFound(file.uri);\n        }\n        if (stat.isDirectory) {\n            throw FileSystemError.FileIsDirectory(file.uri, 'Cannot set the content.');\n        }\n        const encoding = this.doGetEncoding(options);\n        if (encoding !== 'utf8') {\n            throw FileSystemError.FileExists(_uri, 'Unsupported File Encoding. ' + encoding);\n        }\n        // const encodedContent = iconv.encode(content, encoding);\n        await this._s3fs.writeFile(FileUriLite.fsPath(_uri), content);\n        const newStat = await this.doGetStat(_uri, 1);\n        if (newStat) {\n            return newStat;\n        }\n        // this.fileSystemWatcherServer.kernel_notify(file.uri);\n        throw FileSystemError.FileNotFound(file.uri, 'Error occurred while writing file content.');\n    }\n\n    async updateContent(file: FileStat, contentChanges: TextDocumentContentChangeEvent[], options?: { encoding?: string, overwriteEncoding?: string }): Promise<FileStat> {\n        const _uri = new URI(file.uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            throw FileSystemError.FileNotFound(file.uri);\n        }\n        if (stat.isDirectory) {\n            throw FileSystemError.FileIsDirectory(file.uri, 'Cannot set the content.');\n        }\n        if (contentChanges.length === 0 && !(options && options.overwriteEncoding)) {\n            return stat;\n        }\n        const encoding = this.doGetEncoding(options);\n        if (encoding !== 'utf8') {\n            throw FileSystemError.FileExists(_uri, 'Unsupported File Encoding. ' + encoding);\n        }\n        const contentBuffer = await this._s3fs.readFile(FileUriLite.fsPath(_uri));\n        const content = contentBuffer.toString();\n        const newContent = this.applyContentChanges(content, contentChanges);\n        await this._s3fs.writeFile(FileUriLite.fsPath(_uri), newContent);\n        const newStat = await this.doGetStat(_uri, 1);\n        if (newStat) {\n            return newStat;\n        }\n        // this.fileSystemWatcherServer.kernel_notify(file.uri);\n        throw FileSystemError.FileNotFound(file.uri, 'Error occurred while writing file content.');\n    }\n\n    protected applyContentChanges(content: string, contentChanges: TextDocumentContentChangeEvent[]): string {\n        let document = TextDocument.create('', '', 1, content);\n        for (const change of contentChanges) {\n            let newContent: string;\n            if (TextDocumentContentChangeDelta.is(change)) {\n                const start = document.offsetAt(change.range.start);\n                const end = document.offsetAt(change.range.end);\n                newContent = document.getText().substr(0, start) + change.text + document.getText().substr(end);\n            } else {\n                newContent = change.text;\n            }\n            document = TextDocument.create(document.uri, document.languageId, document.version, newContent);\n        }\n        return document.getText();\n    }\n\n    async move(sourceUri: string, targetUri: string, options?: FileMoveOptions): Promise<FileStat> {\n        if (this.client) {\n            this.client.willMove(sourceUri, targetUri);\n        }\n        const result = await this.doMove(sourceUri, targetUri, options);\n        if (this.client) {\n            this.client.didMove(sourceUri, targetUri, false);\n        }\n        return result;\n    }\n    protected async doMove(sourceUri: string, targetUri: string, options?: FileMoveOptions): Promise<FileStat> {\n        const _sourceUri = new URI(sourceUri);\n        const _targetUri = new URI(targetUri);\n        const overwrite = this.doGetOverwrite(options);\n        const [sourceStat, targetStat] = await Promise.all([this.doGetStat(_sourceUri, 1), this.doGetStat(_targetUri, 1)]);\n        if (!sourceStat) {\n            throw FileSystemError.FileNotFound(sourceUri);\n        }\n        if (targetStat && !overwrite) {\n            throw FileSystemError.FileExists(targetUri, \"Did you set the 'overwrite' flag to true?\");\n        }\n        // Different types. Files <-> Directory.\n        if (targetStat && sourceStat.isDirectory !== targetStat.isDirectory) {\n            if (targetStat.isDirectory) {\n                throw FileSystemError.FileIsDirectory(targetStat.uri, `Cannot move '${sourceStat.uri}' file to an existing location.`);\n            }\n            throw FileSystemError.FileNotDirectory(targetStat.uri, `Cannot move '${sourceStat.uri}' directory to an existing location.`);\n        }\n        await this._s3fs.ensureDirExist(FileUriLite.fsPath(_targetUri.parent));\n        await this._s3fs.rename(FileUriLite.fsPath(_sourceUri), FileUriLite.fsPath(_targetUri));\n        const stats = await this.doGetStat(_targetUri, 1);\n        if (stats) {\n            return stats;\n        }\n        throw FileSystemError.FileNotFound(_targetUri, `Error occurred when doing recursive move '${sourceUri}' to '${targetUri}'.`);\n    }\n\n    async copy(sourceUri: string, targetUri: string, options?: { overwrite?: boolean, recursive?: boolean }): Promise<FileStat> {\n        // throw FileSystemError.FileExists(targetUri, 'Not implemented copy ');\n        const _sourceUri = new URI(sourceUri);\n        const _targetUri = new URI(targetUri);\n        const recursive = this.doGetRecursive(options);\n        const overwrite = this.doGetOverwrite(options);\n        const [sourceStat, targetStat] = await Promise.all([\n            this.doGetStat(_sourceUri, 0),\n            this.doGetStat(_targetUri, 0),\n        ]);\n        if (!sourceStat) {\n            throw FileSystemError.FileNotFound(sourceUri);\n        }\n        if (targetStat && !overwrite) {\n            throw FileSystemError.FileExists(targetUri, \"Did you set the 'overwrite' flag to true?\");\n        }\n        if (targetStat && targetStat.uri === sourceStat.uri) {\n            throw FileSystemError.FileExists(targetUri, 'Cannot perform copy, source and destination are the same.');\n        }\n        if (targetStat && !targetStat.isDirectory && sourceStat.isDirectory) {\n            throw FileSystemError.FileExists(targetUri, 'Cannot perform copy, source is directory and destination is a file.');\n        }\n\n        // await this.doCopyFile(_sourceUri, _targetUri, overwrite, recursive);\n        if (!recursive && sourceStat.isDirectory) {\n            throw FileSystemError.FileExists(targetUri, 'Cannot perform copy directory when recursive is off');\n        }\n        await this._s3fs.ensureDirExist(FileUriLite.fsPath(_targetUri.parent));\n        // await this.doMkdirRecursive(_targetUri.parent);\n        // await this.getLock();\n        if (sourceStat.isDirectory) {\n            await this._s3fs.copyFolder(FileUriLite.fsPath(_sourceUri), FileUriLite.fsPath(_targetUri));\n        } else {\n            await this._s3fs.copyFile(FileUriLite.fsPath(_sourceUri), FileUriLite.fsPath(_targetUri));\n        }\n\n        const newStat = await this.doGetStat(_targetUri, 1);\n        if (newStat) {\n            return newStat;\n        }\n        throw FileSystemError.FileNotFound(targetUri, `Error occurred while copying ${sourceUri} to ${targetUri}.`);\n    }\n\n    async createFile(uri: string, options?: { content?: string, encoding?: string }): Promise<FileStat> {\n        const _uri = new URI(uri);\n        const parentUri = _uri.parent;\n        const [stat, parentStat] = await Promise.all([this.doGetStat(_uri, 0), this.doGetStat(parentUri, 0)]);\n        if (stat) {\n            throw FileSystemError.FileExists(uri, 'Error occurred while creating the file.');\n        }\n        if (!parentStat) {\n            await this._s3fs.ensureDirExist(FileUriLite.fsPath(parentUri));\n            // await this.doMkdirRecursive(parentUri);\n        }\n        const content = this.doGetContent(options);\n        const encoding = this.doGetEncoding(options);\n        if (encoding !== 'utf8') {\n            throw FileSystemError.FileExists(uri, 'Unsupported File Encoding. ' + encoding);\n        }\n        // const encodedNewContent = iconv.encode(content, encoding);\n        await this._s3fs.writeFile(FileUriLite.fsPath(_uri), content);\n        const newStat = await this.doGetStat(_uri, 1);\n        if (newStat) {\n            return newStat;\n        }\n        throw FileSystemError.FileNotFound(uri, 'Error occurred while creating the file.');\n    }\n\n    async createFolder(uri: string): Promise<FileStat> {\n        const _uri = new URI(uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (stat) {\n            if (stat.isDirectory) {\n                return stat;\n            }\n            throw FileSystemError.FileExists(uri, 'Error occurred while creating the directory: path is a file.');\n        }\n        await this._s3fs.ensureDirExist(FileUriLite.fsPath(_uri));\n        // await this.doMkdirRecursive(_uri);\n        const newStat = await this.doGetStat(_uri, 1);\n        if (newStat) {\n            return newStat;\n        }\n        throw FileSystemError.FileNotFound(uri, 'Error occurred while creating the directory.');\n    }\n\n    public async touchFile(uri: string): Promise<FileStat> {\n        throw FileSystemError.FileExists(uri, 'Touchfile not implemented delete');\n    }\n\n    public async delete(uri: string, options?: FileDeleteOptions): Promise<void> {\n        // throw FileSystemError.FileExists(uri, 'Not implemented delete');\n        const _uri = new URI(uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            throw FileSystemError.FileNotFound(uri);\n        }\n        await this._s3fs.delete(FileUriLite.fsPath(_uri));\n    }\n\n    public async getEncoding(uri: string): Promise<string> {\n        const _uri = new URI(uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            throw FileSystemError.FileNotFound(uri);\n        }\n        if (stat.isDirectory) {\n            throw FileSystemError.FileIsDirectory(uri, 'Cannot get the encoding.');\n        }\n        return this.options.encoding;\n    }\n\n    public async guessEncoding(uri: string): Promise<string | undefined> {\n        console.log('guessEncoding is dummy: ' + uri);\n        return 'utf8';\n    }\n\n    public async getRoots(): Promise<FileStat[]> {\n        const cwdRoot = '/';\n        const rootUri = FileUriLite.create(cwdRoot);\n        const root = await this.doGetStat(rootUri, 1);\n        if (root) {\n            return [root];\n        }\n        return [];\n    }\n\n    public async getCurrentUserHome(): Promise<FileStat | undefined> {\n        return this.getFileStat(FileUriLite.create('/').toString());\n    }\n\n    public getDrives(): Promise<string[]> {\n        return new Promise<string[]>((resolve, reject) => { resolve(['/']); });\n    }\n\n    dispose(): void {\n        // NOOP\n    }\n\n    public async access(uri: string, mode: number = FileAccess.Constants.F_OK): Promise<boolean> {\n        // Same as exists\n        const _uri = new URI(uri);\n        const stat = await this.doGetStat(_uri, 0);\n        if (!stat) {\n            return false;\n        }\n        return true;\n    }\n\n    public async getFsPath(uri: string): Promise<string | undefined> {\n        if (!uri.startsWith('file:/')) {\n            return undefined;\n        } else {\n            return FileUriLite.fsPath(uri);\n        }\n    }\n\n    protected async doGetStat(uri: URI, depth: number): Promise<FileStat | undefined> {\n        const s3obj = await this._s3fs.stat(FileUriLite.fsPath(uri));\n        if (s3obj) {\n            if (s3obj.isDir) {\n                return this.doCreateDirectoryStat(uri, s3obj, depth);\n            } else {\n                return this.doCreateFileStat(uri, s3obj);\n            }\n        } else {\n            return undefined;\n        }\n    }\n\n    protected doCreateFileStat(uri: URI, stat: S3Object): FileStat {\n        return {\n            uri: uri.toString(),\n            lastModification: stat.modifiedTime.getTime(),\n            isDirectory: stat.isDir,\n            size: stat.size\n        };\n    }\n\n    protected async doCreateDirectoryStat(uri: URI, stat: S3Object, depth: number): Promise<FileStat> {\n        const children = depth > 0 ? await this.doGetChildren(uri, depth) : [];\n        return {\n            uri: uri.toString(),\n            lastModification: stat.modifiedTime.getTime(),\n            isDirectory: true,\n            children\n        };\n    }\n\n    protected async doGetChildren(uri: URI, depth: number): Promise<FileStat[]> {\n        const files = await this._s3fs.readdir(FileUriLite.fsPath(uri));\n        // console.log('readdir ' + FileUriLite.fsPath(uri) + ' ' + files.length);\n        const children: FileStat[] = [];\n        files.forEach(v => {\n            // console.log(v.uri);\n            const _uri = new URI(v.uri);\n            // console.log(v.uri);\n            // console.log(v.isDir);\n            children.push(this.doCreateFileStat(_uri, v));\n        });\n        return children;\n    }\n\n    protected doGetEncoding(option?: { encoding?: string }): string {\n        return option && typeof (option.encoding) !== 'undefined'\n            ? option.encoding\n            : this.options.encoding;\n    }\n\n    protected doGetOverwrite(option?: { overwrite?: boolean }): boolean {\n        return option && typeof (option.overwrite) !== 'undefined'\n            ? option.overwrite\n            : this.options.overwrite;\n    }\n\n    protected doGetRecursive(option?: { recursive?: boolean }): boolean {\n        return option && typeof (option.recursive) !== 'undefined'\n            ? option.recursive\n            : this.options.recursive;\n    }\n\n    protected doGetContent(option?: { content?: string }): string {\n        return (option && option.content) || '';\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { FileStat } from './filesystem';\nimport URI from '@theia/core/lib/common/uri';\nimport { Path } from '@theia/core/lib/common';\n\nexport namespace FileSystemUtils {\n\n    /**\n     * Tildify path, replacing `home` with `~` if user's `home` is present at the beginning of the path.\n     * This is a non-operation for Windows.\n     *\n     * @param resourcePath\n     * @param home\n     */\n    export function tildifyPath(resourcePath: string, home: string): string {\n        const path = new Path(resourcePath);\n        const isWindows = path.root && Path.isDrive(path.root.base);\n\n        if (!isWindows && home && resourcePath.indexOf(`${home}/`) === 0) {\n            return resourcePath.replace(`${home}/`, '~/');\n        }\n\n        return resourcePath;\n    }\n\n    /**\n     * Generate unique URI for a given parent which does not collide\n     *\n     * @param parentUri the `URI` of the parent\n     * @param parent the `FileStat` of the parent\n     * @param name the resource name\n     * @param ext the resource extension\n     */\n    export function generateUniqueResourceURI(parentUri: URI, parent: FileStat, name: string, ext: string = ''): URI {\n        const children = !parent.children ? [] : parent.children!.map(child => new URI(child.uri));\n\n        let index = 1;\n        let base = name + ext;\n        while (children.some(child => child.path.base === base)) {\n            index = index + 1;\n            base = name + '_' + index + ext;\n        }\n        return parentUri.resolve(base);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './filesystem';\nexport * from './filesystem-utils';\n"],"sourceRoot":""}