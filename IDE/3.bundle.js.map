{"version":3,"sources":["webpack:////home/elliott/playground/test/theia/packages/filesystem/src/browser/s3storagesystem.ts","webpack:///fs (ignored)","webpack:///util (ignored)","webpack:///util (ignored)?7b6e"],"names":[],"mappings":"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","file":"3.bundle.js","sourcesContent":["/* eslint-disable @typescript-eslint/tslint/config */\n/********************************************************************************\n * Copyright (C) 2019 Gerald Weber and Elliott Wen.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * SPDX-License-Identifier: AGPL-3.0-or-later\n ********************************************************************************/\nimport { injectable, inject } from 'inversify';\nimport * as S3 from 'aws-sdk/clients/s3';\nimport * as JSZIP from 'jszip';\nimport * as path from 'path';\nimport { FileSystemWatcherServer } from '../common/filesystem-watcher-protocol';\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/*\n * Minio can not end a file with '/', we need a marker, this client is designed only for Minio\n * For s3, a conflicted solution is needed to tell whether a file is a dir or file.\n * For S3, a more work is needed. Do not use it in S3 right now. A possible solution is to use ETag\n * for directory distinguish\n */\nconst ROOT_MARKER = '__D1r__Ro0t__';\n\nfunction GenerateRandomID(): string {\n    // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n\n/**\n * Configuration options for file system.\n */\nexport class S3StorageSystemOptions {\n    // The name of this file system. You can have multiple IndexedDB file systems operating\n    // at once, but each must have a different name.\n    bucket: string = 'swiftlatex';\n    prefix: string = '';\n    // The Key, Secret, Token\n    apiKey: string = '';\n    apiSecret: string = '';\n    sessionToken: string = '';\n    endpoint: string = '';\n    expiry: number = 0;\n    // The size of the inode cache. Defaults to 100. A size of 0 or below disables caching.\n}\n\ninterface MetaDictionary<T> {\n    [key: string]: T;\n}\n\ninterface DirectoryInode {\n    node_id: string;\n    is_dir: boolean;\n}\n\ninterface Directory {\n    [key: string]: DirectoryInode;\n}\n\ninterface DirectoryWalkResult {\n    uri: string;\n    node_id: string;\n}\n\n/**\n * FileStat\n */\nexport class S3Object {\n    public modifiedTime: Date = new Date();\n    public ETag: string = '';\n    public size: number = 0;\n    public meta: MetaDictionary<string> = {};\n    public data: Uint8Array | string | undefined = undefined;\n\n    /* For upper application layer */\n    public key: string = '';\n    public uri: string = '';\n    public isDir: boolean = false;\n}\n\n/**\n * Configuration options for file system. All APIs do not accpet parameter ends with '/'\n */\n@injectable()\nexport class S3StorageSystem {\n    private s3: S3 | undefined = undefined;\n\n    public opts: S3StorageSystemOptions = new S3StorageSystemOptions();\n\n    private s3lock: boolean = false;\n\n    @inject(FileSystemWatcherServer)\n    private readonly fileSystemWatcherServer: FileSystemWatcherServer;\n\n    constructor() {\n        this._init_fs().catch(e => {\n            throw e;\n        });\n    }\n\n    private async _init_fs() {\n        const rootnode = await this._headObject(ROOT_MARKER);\n        if (!rootnode) {\n            const empty_list: MetaDictionary<MetaDictionary<string>> = {};\n            const obj = new S3Object();\n            obj.data = JSON.stringify(empty_list);\n            await this._putObject(ROOT_MARKER, obj);\n        }\n    }\n\n    /* Query a path to its node id */\n    public async _resolvePath(p: string): Promise<DirectoryInode | undefined> {\n        if (!p || p === '.') {\n            return undefined;\n        }\n        if (p === '/') {\n            return { node_id: ROOT_MARKER, is_dir: true };\n        } else {\n            const parent = await this._resolvePath(path.dirname(p));\n            if (!parent) {\n                return undefined;\n            }\n            const parent_nodeid = parent.node_id;\n            const dirListObj = await this._getObject(parent_nodeid);\n            if (!dirListObj) {\n                return undefined;\n            }\n            const jsonList: Directory = JSON.parse(dirListObj.data!.toString());\n            const node: DirectoryInode = jsonList[path.basename(p)];\n            return node;\n        }\n        return undefined;\n    }\n\n    public async ensureDirExist(p: string): Promise<void> {\n        /* To prevent endless recursive */\n        if (p === '/' || p === '.' || p === '') {\n            return;\n        }\n        const s3stat = await this._resolvePath(p);\n        if (s3stat) {\n            return;\n        }\n        const parentDir = path.dirname(p);\n        await this.ensureDirExist(parentDir);\n        await this.mkdir(p);\n    }\n\n    /* Stat a file or dir, one API turnaround*/\n    public async stat(p: string): Promise<S3Object | undefined> {\n        // console.log('stat ' + p);\n        /* Base Case */\n        const node = await this._resolvePath(p);\n\n        if (!node) {\n            return undefined;\n        }\n\n        const obj = await this._headObject(node.node_id);\n        if (obj) {\n            obj.uri = p;\n            obj.isDir = node.is_dir;\n        }\n        return obj;\n    }\n\n    /* Read dir, one api turnaround , a little bit hack to reduce the turnaround */\n    public async readdir(p: string): Promise<S3Object[]> {\n\n        const node = await this._resolvePath(p);\n\n        if (!node || !node.is_dir) {\n            throw Error(`Directory ${p} no exists`);\n        }\n\n        const obj = await this._getObject(node.node_id);\n\n        if (!obj) {\n            throw Error(`Url ${p} does not exists due to filesystem corruption`);\n        }\n\n        const jsonList: Directory = JSON.parse(obj.data!.toString());\n\n        const objs: S3Object[] = [];\n\n        for (const name in jsonList) {\n            if (jsonList.hasOwnProperty(name)) {\n                const robj = new S3Object();\n                robj.uri = (p === '/' ? '/' : p + '/') + name;\n                robj.isDir = jsonList[name].is_dir;\n                robj.key = jsonList[name].node_id;\n                objs.push(robj);\n            }\n        }\n\n        return objs;\n    }\n\n    public async mkdir(p: string): Promise<void> {\n        if (!p || p === '/') {\n            throw Error(`Directory ${p} already exists`);\n        }\n\n        const parent_node = await this._resolvePath(path.dirname(p));\n        if (!parent_node || !parent_node.is_dir) {\n            throw Error(`Directory ${p} cannot be made because its parent is missing`);\n        }\n\n        const parent_obj = await this._getObject(parent_node.node_id);\n\n        if (!parent_obj) {\n            throw Error(`Directory ${p} cannot be made due to filesystem corruption`);\n        }\n\n        const jsonList: Directory = JSON.parse(parent_obj.data!.toString());\n\n        const basename = path.basename(p);\n\n        if (basename in jsonList) {\n            throw Error(`Directory ${p} already exists`);\n        }\n\n        /* Make the obj first */\n        const new_id = GenerateRandomID();\n        const new_obj = new S3Object();\n        new_obj.data = '{}';\n        await this._putObject(new_id, new_obj);\n\n        /* Update the parent */\n        jsonList[basename] = { node_id: new_id, is_dir: true };\n        parent_obj.data = JSON.stringify(jsonList);\n        await this._putObject(parent_node.node_id, parent_obj);\n\n        (<any>this.fileSystemWatcherServer).kernel_notify(p, 1);\n    }\n\n    /* Two turn around */\n    public async writeFile(p: string, data: string | Uint8Array): Promise<void> {\n        if (!p || p === '/') {\n            throw Error(`Directory ${p} not writable`);\n        }\n\n        const parent_node = await this._resolvePath(path.dirname(p));\n\n        if (!parent_node || !parent_node.is_dir) {\n            throw Error(`File ${p} cannot be write because its parent is missing`);\n        }\n\n        const parent_obj = await this._getObject(parent_node.node_id);\n\n        if (!parent_obj) {\n            throw Error(`Directory ${p} cannot be made due to filesystem corruption`);\n        }\n\n        const jsonList: Directory = JSON.parse(parent_obj.data!.toString());\n\n        const basename = path.basename(p);\n\n        if (basename in jsonList) {\n            const old_node = jsonList[basename];\n            if (old_node.is_dir) {\n                throw Error(` ${p} is a directory`);\n            }\n            const old_id = jsonList[basename].node_id;\n            const new_obj = new S3Object();\n            new_obj.data = data;\n            await this._putObject(old_id, new_obj);\n            (<any>this.fileSystemWatcherServer).kernel_notify(p, 0);\n        } else {\n            /* Make the obj first */\n            const new_id = GenerateRandomID();\n            const new_obj = new S3Object();\n            new_obj.data = data;\n            await this._putObject(new_id, new_obj);\n            /* Update the parent */\n            jsonList[basename] = { node_id: new_id, is_dir: false };\n            parent_obj.data = JSON.stringify(jsonList);\n            await this._putObject(parent_node.node_id, parent_obj);\n            (<any>this.fileSystemWatcherServer).kernel_notify(p, 1);\n        }\n    }\n\n    /* Delete file three turnaround, very rarely used, so no optimization */\n    public async delete(p: string): Promise<void> {\n        if (!p || p === '/') {\n            throw Error(`Directory ${p} not deletable`);\n        }\n\n        const parent_node = await this._resolvePath(path.dirname(p));\n\n        if (!parent_node || !parent_node.is_dir) {\n            throw Error(`File ${p} cannot be deleted because its parent is missing`);\n        }\n\n        const parent_obj = await this._getObject(parent_node.node_id);\n\n        if (!parent_obj) {\n            throw Error(`Directory ${p} cannot be made due to filesystem corruption`);\n        }\n\n        const jsonList: Directory = JSON.parse(parent_obj.data!.toString());\n\n        const basename = path.basename(p);\n\n        if (basename in jsonList) {\n            delete jsonList[basename];\n            parent_obj.data = JSON.stringify(jsonList);\n            await this._putObject(parent_node.node_id, parent_obj);\n            (<any>this.fileSystemWatcherServer).kernel_notify(p, 2);\n        } else {\n            throw Error(`Stuff ${p} does not exist`);\n        }\n    }\n\n    public async zipDir(p: string): Promise<Uint8Array> {\n        const walkResults = await this._walkdir(p);\n        const zipobj = new JSZIP();\n        for (let j = 0; j < walkResults.length; j++) {\n            const s3obj = await this._getObject(walkResults[j].node_id);\n            if (!s3obj) {\n                continue;\n            }\n            zipobj.file(walkResults[j].uri, s3obj.data!);\n        }\n        const buf = await zipobj.generateAsync({ type: 'uint8array' });\n        return buf;\n    }\n\n    public async copyFile(p: string, newPath: string): Promise<void> {\n        const self_node = await this._resolvePath(p);\n        if (!self_node) {\n            throw Error(`Stuff ${p} does not exist`);\n        }\n\n        if (self_node.is_dir) {\n            throw Error(`Stuff ${p} is a directory`);\n        }\n\n        /* Check Dst */\n        const dstParentPath = path.dirname(newPath);\n        const dstParentNode = await this._resolvePath(dstParentPath);\n        if (!dstParentNode) {\n            throw Error(`Directory ${dstParentPath} does no exists`);\n        }\n\n        const dstParentObj = await this._getObject(dstParentNode.node_id);\n        if (!dstParentObj) {\n            throw Error(`Directory ${dstParentPath} does no exists due to filesystem corruption`);\n        }\n        const dstJsonList: Directory = JSON.parse(dstParentObj.data!.toString());\n        const dstBasename = path.basename(newPath);\n\n        if (dstBasename in dstJsonList && dstJsonList[dstBasename].is_dir !== self_node.is_dir) {\n            throw Error('Cannot overwrite a dir with a file');\n        }\n\n        const new_object_id = GenerateRandomID();\n        await this._copyObject(self_node.node_id, new_object_id);\n\n        dstJsonList[dstBasename] = { node_id: new_object_id, is_dir: false };\n        dstParentObj.data = JSON.stringify(dstJsonList);\n        await this._putObject(dstParentNode.node_id, dstParentObj);\n\n        (<any>this.fileSystemWatcherServer).kernel_notify(newPath, 1);\n    }\n\n    public async copyFolder(p: string, newPath: string): Promise<void> {\n        const self_node = await this._resolvePath(p);\n        if (!self_node) {\n            throw Error(`Stuff ${p} does not exist`);\n        }\n\n        if (!self_node.is_dir) {\n            throw Error(`Stuff ${p} is a file`);\n        }\n\n        /* Check Dst */\n        const dstParentPath = path.dirname(newPath);\n        const dstParentNode = await this._resolvePath(dstParentPath);\n        if (!dstParentNode) {\n            throw Error(`Directory ${dstParentPath} does no exists`);\n        }\n\n        const dstParentObj = await this._getObject(dstParentNode.node_id);\n        if (!dstParentObj) {\n            throw Error(`Directory ${dstParentPath} does no exists due to filesystem corruption`);\n        }\n        const dstJsonList: Directory = JSON.parse(dstParentObj.data!.toString());\n        const dstBasename = path.basename(newPath);\n\n        if (dstBasename in dstJsonList) {\n            if (dstJsonList[dstBasename].is_dir !== self_node.is_dir) {\n                throw Error('Cannot overwrite a dir with a file');\n            }\n        }\n\n        /* Do magic work */\n        const walk = await this._walkdir(p);\n        for (let j = 0; j < walk.length; j++) {\n            const uri = walk[j].uri;\n            const dst = newPath + uri.substring(p.length);\n            await this.ensureDirExist(path.dirname(dst));\n            await this.copyFile(uri, dst);\n        }\n\n    }\n\n    private async _walkdir(p: string): Promise<DirectoryWalkResult[]> {\n        if (!p) {\n            return [];\n        }\n        let results: DirectoryWalkResult[] = [];\n        const objs = await this.readdir(p);\n        for (let j = 0; j < objs.length; j++) {\n            const obj = objs[j];\n            if (obj.isDir) {\n                const inner_results = await this._walkdir(obj.uri);\n                results = results.concat(inner_results);\n            } else {\n                results.push({ uri: obj.uri, node_id: obj.key });\n            }\n        }\n        return results;\n    }\n\n    public async rename(p: string, newPath: string): Promise<void> {\n        if (!p || p === '/') {\n            throw Error('cannot rename/copy root folder /');\n        }\n\n        if (p === newPath) {\n            throw Error('Src and Dst are the same');\n        }\n\n        /* Check the src */\n        const srcParentPath = path.dirname(p);\n        const srcParentNode = await this._resolvePath(srcParentPath);\n        if (!srcParentNode) {\n            throw Error(`File or Directory ${p} does not exists`);\n        }\n        const srcParentObj = await this._getObject(srcParentNode.node_id);\n        if (!srcParentObj) {\n            throw Error(`File or Directory ${p} does not exists`);\n        }\n        const srcJsonList: Directory = JSON.parse(srcParentObj.data!.toString());\n        const srcBasename: string = path.basename(p);\n        if (!(srcBasename in srcJsonList)) {\n            throw Error(`File or Directory ${p} does not exists`);\n        }\n\n        /* Check the dst */\n        const dstParentPath = path.dirname(newPath);\n        const dstBasename = path.basename(newPath);\n        if (srcParentPath === dstParentPath) {\n            /* Fast routine */\n            if (dstBasename in srcJsonList && srcJsonList[dstBasename].is_dir !== srcJsonList[srcBasename].is_dir) {\n                throw Error('Cannot overwrite a dir with a file');\n            }\n            srcJsonList[dstBasename] = srcJsonList[srcBasename];\n            delete srcJsonList[srcBasename];\n            srcParentObj.data = JSON.stringify(srcJsonList);\n            await this._putObject(srcParentNode.node_id, srcParentObj);\n            (<any>this.fileSystemWatcherServer).kernel_notify(p, 2);\n            (<any>this.fileSystemWatcherServer).kernel_notify(newPath, 1);\n            return;\n        }\n\n        /* We need to check the dst */\n\n        const dstParentNode = await this._resolvePath(dstParentPath);\n        if (!dstParentNode) {\n            throw Error(`Directory ${dstParentPath} does no exists`);\n        }\n\n        const dstParentObj = await this._getObject(dstParentNode.node_id);\n        if (!dstParentObj) {\n            throw Error(`Directory ${dstParentPath} does no exists due to filesystem corruption`);\n        }\n        const dstJsonList: Directory = JSON.parse(dstParentObj.data!.toString());\n\n        if (dstBasename in dstJsonList && dstJsonList[dstBasename].is_dir !== srcJsonList[srcBasename].is_dir) {\n            throw Error('Cannot overwrite a dir with a file');\n        }\n        dstJsonList[dstBasename] = srcJsonList[srcBasename];\n\n        /* Write */\n        delete srcJsonList[srcBasename];\n        srcParentObj.data = JSON.stringify(srcJsonList);\n        await this._putObject(srcParentNode.node_id, srcParentObj);\n\n        /* Update Dst */\n        dstParentObj.data = JSON.stringify(dstJsonList);\n        await this._putObject(dstParentNode.node_id, dstParentObj);\n        (<any>this.fileSystemWatcherServer).kernel_notify(p, 2);\n        (<any>this.fileSystemWatcherServer).kernel_notify(newPath, 1);\n    }\n\n    /* Optimized for fast read, two turn around */\n    public async readFile(p: string): Promise<Uint8Array> {\n        const self_node = await this._resolvePath(p);\n        if (!self_node) {\n            throw Error(`File ${p} not exists`);\n        }\n\n        if (self_node.is_dir) {\n            throw Error(`File ${p} is directory`);\n        }\n\n        const self_obj = await this._getObject(self_node.node_id);\n\n        if (!self_obj) {\n            throw Error(`File ${p} cannot be made read to filesystem corruption`);\n        }\n\n        return <Uint8Array>self_obj.data;\n    }\n\n    /* Check whether it is key available */\n    public async _headObject(key: string): Promise<S3Object | undefined> {\n        await this._lock();\n        try {\n            // // console.log('s3heading ' + key);\n            const headResult = await this.s3!.headObject({\n                Bucket: this.opts.bucket,\n                Key: this.opts.prefix + key,\n            }).promise();\n            const filestat = new S3Object();\n            filestat.meta = headResult.Metadata || {};\n            filestat.ETag = headResult.ETag!;\n            filestat.size = headResult.ContentLength!;\n            filestat.modifiedTime = headResult.LastModified!;\n            filestat.key = key;\n            return filestat;\n        } catch (err) {\n            if (err.code === 'NotFound') {\n                return undefined;\n            }\n            throw err;\n        } finally {\n            this._unlock();\n        }\n    }\n\n    /* Get object */\n    public async _getObject(key: string): Promise<S3Object | undefined> {\n        await this._lock();\n        try {\n            const getResult = await this.s3!.getObject({\n                Bucket: this.opts.bucket,\n                Key: this.opts.prefix + key,\n                ResponseCacheControl: 'max-age=0'\n            }).promise();\n            const obj = new S3Object();\n            obj.size = getResult.ContentLength!;\n            obj.ETag = getResult.ETag!;\n            obj.data = <Uint8Array>getResult.Body!;\n            obj.modifiedTime = getResult.LastModified!;\n            obj.meta = getResult.Metadata || {};\n            obj.key = key;\n            return obj;\n        } catch (err) {\n            if (err.code === 'NotFound') {\n                return undefined;\n            }\n            throw err;\n        } finally {\n            this._unlock();\n        }\n    }\n\n    /* Put object */\n    public async _putObject(key: string, obj: S3Object): Promise<void> {\n        await this._lock();\n        try {\n            const s3CompatMeta: MetaDictionary<string> = {};\n            if (obj.meta) {\n                for (const metaKey in obj.meta) {\n                    if (obj.meta.hasOwnProperty(metaKey)) {\n                        s3CompatMeta['x-amz-meta-' + metaKey] = obj.meta[metaKey];\n                    }\n                }\n            }\n            await this.s3!.putObject({\n                Body: obj.data,\n                Bucket: this.opts.bucket,\n                Key: this.opts.prefix + key,\n                Metadata: s3CompatMeta,\n            }).promise();\n        } catch (e) {\n            throw e;\n        } finally {\n            this._unlock();\n        }\n    }\n\n    public async _copyObject(srcKey: string, dstKey: string): Promise<void> {\n        await this._lock();\n        try {\n            await this.s3!.copyObject({\n                Bucket: this.opts.bucket,\n                CopySource: this.opts.bucket + '/' + this.opts.prefix + srcKey,\n                Key: this.opts.prefix + dstKey,\n            }).promise();\n        } catch (e) {\n            throw e;\n        } finally {\n            this._unlock();\n        }\n    }\n\n    private async _lock(): Promise<void> {\n        while (this.s3lock) {\n            await new Promise(r => setTimeout(r, 10));\n        }\n        this.s3lock = true;\n        await this._prepareLocked();\n    }\n\n    private _unlock(): void {\n        this.s3lock = false;\n    }\n\n    /* Assume Lock */\n    private async _prepareLocked(): Promise<void> {\n        if (Date.now() > this.opts.expiry) {\n            /* Need to renew */\n            this.s3 = undefined;\n            const creds = await fetch('/key');\n            const json_creds = await creds.json();\n            this.opts.apiKey = json_creds['_APIKEY'];\n            this.opts.apiSecret = json_creds['_APISECRET'];\n            this.opts.sessionToken = json_creds['_SESSIONTOKEN'];\n            this.opts.prefix = json_creds['_PREFIX'];\n            this.opts.bucket = json_creds['_BUCKET'];\n            this.opts.expiry = Date.now() + 60 * 2 * 1000;\n            this.opts.endpoint = json_creds['_ENDPOINT'];\n            if (!this.opts.apiKey) {\n            \twindow.alert('Failed to connect to SwiftLaTeX');\n                throw Error('Failed to obtain an api key');\n            }\n            if (!this.opts.prefix || !this.opts.prefix.endsWith('/')) {\n                throw Error('Prefix should not be empty or endwith a slash.');\n            }\n\n            /* Have a new client */\n            this.s3 = new S3({\n                accessKeyId: this.opts.apiKey,\n                secretAccessKey: this.opts.apiSecret,\n                sessionToken: this.opts.sessionToken,\n                endpoint: this.opts.endpoint,\n                s3ForcePathStyle: true,\n                signatureVersion: 'v4',\n            });\n        }\n    }\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}